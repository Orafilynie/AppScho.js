{"version":3,"sources":["../src/core/constants.ts","../src/api/career/events.ts","../src/core/errors.ts","../src/core/handler.ts","../src/api/crous/index.ts","../src/api/crous/restaurants.ts","../src/api/events.ts","../src/api/external-services.ts","../src/api/facebook.ts","../src/api/feed/channels.ts","../src/api/feed/posts.ts","../src/api/knowledgebase.ts","../src/api/locations.ts","../src/api/login/credentials.ts","../src/api/login/oauth.ts","../src/api/metadata.ts","../src/api/news.ts","../src/api/planning.ts","../src/api/profiles.ts","../src/api/quickaccess.ts","../src/api/twitter.ts","../src/api/youtube.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["import type { Instance } from \"~/models\";\n\n// @see https://github.com/LiterateInk/AppScho.Documentation/blob/main/DISCOVERING_INSTANCES.md\nexport const INSTANCES: Array<Instance> = [\n  { id: \"bsb\", name: \"Burgundy School of Business\" },\n  { id: \"edhec\", name: \"EDHEC Business School\" },\n  { id: \"emstra\", name: \"EM Strasbourg INSIDE\" },\n  { id: \"esarc\", name: \"ESARC go\", casurl: \"https://gge-fra.onelogin.com/oidc/2/auth\", clientid: \"04a71590-4e7e-013d-0d74-4224903aba3737627\", scope: \"openid+profile+email+params+groups\", uriend: false },\n  { id: \"esg\", name: \"ESG Live\", casurl: \"https://gge-fra.onelogin.com/oidc/2/auth\", clientid: \"9ffb9be0-4e7d-013d-5b5d-123144e9468637627\", scope: \"openid+profile+email+params+groups\", uriend: false },\n  { id: \"essec\", name: \"ESSEC Business School\" },\n  { id: \"digitalcampus\", name: \"GGE - Digital Campus\", casurl: \"https://gge-fra.onelogin.com/oidc/2/auth\", clientid: \"63a20580-4e7f-013d-983f-3ae74bc6093237627\", scope: \"openid+profile+email+params+groups\", uriend: false },\n  { id: \"macromedia\", name: \"Galileo Global Education Germany\", casurl: \"https://gge-deu.onelogin.com/oidc/2/auth\", clientid: \"ba5a9ba0-88f8-013a-9a42-02ce5bf6a8b437628\", scope: \"openid+profile+email+params+groups\", uriend: false },\n  { id: \"hec\", name: \"HEC Paris\" },\n  { id: \"icp\", name: \"ICP\" },\n  { id: \"ipp\", name: \"IP Paris Campus\" },\n  { id: \"ieu\", name: \"Instituto de Estudios Universitarios\" },\n  { id: \"ieseg\", name: \"IÉSEG Connect\" },\n  { id: \"lisaa\", name: \"LISAA Campus\", casurl: \"https://gge-fra.onelogin.com/oidc/2/auth\", clientid: \"29e9c370-4e80-013d-885d-0abcaae3a4cf37627\", scope: \"openid+profile+email+params+groups\", uriend: false },\n  { id: \"merkure\", name: \"Merkure Live\", casurl: \"https://gge-fra.onelogin.com/oidc/2/auth\", clientid: \"f2d6ed00-7e43-013d-0e35-020afc8f024837627\", scope: \"openid+profile+email+params+groups\", uriend: false },\n  { id: \"mbs\", name: \"Montpellier Business School\" },\n  { id: \"eigsi\", name: \"My EIGSI\" },\n  { id: \"essca\", name: \"My ESSCA\" },\n  { id: \"ucly\", name: \"My Ucly\" },\n  { id: \"alijia\", name: \"MyELIJE\", casurl: \"https://gge-fra.onelogin.com/oidc/2/auth\", clientid: \"df9f8d90-4e7e-013d-9599-3e3983e056fd37627\", scope: \"openid+profile+email+params+groups\", uriend: false },\n  { id: \"epp\", name: \"MyEPP\" },\n  { id: \"esigelec\", name: \"MyESIGELEC\" },\n  { id: \"estp\", name: \"MyESTP\" },\n  { id: \"esaip\", name: \"MyEsaip\" },\n  { id: \"iicp\", name: \"Narratiiv Inside\", casurl: \"https://gge-fra.onelogin.com/oidc/2/auth\", clientid: \"2fe63b60-bff1-013b-ddc6-0668df09704237627\", scope: \"openid+profile+email+params+groups\", uriend: false },\n  { id: \"domus\", name: \"Nuova Accademia: MyDA\" },\n  { id: \"ueve\", name: \"OFIL UnivEvry\" },\n  { id: \"pstb\", name: \"PSTB\", casurl: \"https://gge-fra.onelogin.com/oidc/2/auth\", clientid: \"23cc4030-4e7d-013d-b0f6-4e4814bd4e6d37627\", scope: \"openid+profile+email+params+groups\", uriend: false },\n  { id: \"psb\", name: \"Paris School Of Business\" },\n  { id: \"regent\", name: \"Regent's University London\", casurl: \"https://gge-gbr.onelogin.com/oidc/2/auth\", clientid: \"d29993a0-6b00-013a-7b8e-02732a18081038446\", scope: \"openid+profile+email+params+groups\", uriend: false },\n  { id: \"sciencespo\", name: \"Sciences Po\" },\n  { id: \"scpoaix\", name: \"Sciences Po Aix\" },\n  { id: \"ubmont\", name: \"Université Bordeaux Montaigne\" },\n  { id: \"uclouvain\", name: \"Université Catholique de Louvain\" },\n  { id: \"unieiffel\", name: \"Université Gustave Eiffel\", casurl: \"https://cas.univ-eiffel.fr/oidc/authorize\", clientid: \"726a397e14d8465e80a46202\", uriend: true },\n  { id: \"unilyon3\", name: \"Université Jean Moulin Lyon3\" },\n  { id: \"uniassas\", name: \"Université Paris-Panthéon-Assas\", casurl: \"https://cas.u-paris2.fr/cas/oidc/authorize\", clientid: \"973379d68bb7da4533b84c45eaf2c9fd\", uriend: true },\n  { id: \"univangers\", name: \"Université d'Angers\" },\n  { id: \"unimons\", name: \"Université de Mons\" },\n  { id: \"unimes\", name: \"Université de Nîmes\" },\n  { id: \"upjv\", name: \"Université de Picardie Jules Verne\", casurl: \"https://cas.u-picardie.fr/oidc/authorize\", clientid: \"AppSchoProd\", uriend: true},\n  { id: \"univpoitiers\", name: \"Université de Poitiers\" },\n  { id: \"unitoulon\", name: \"Université de Toulon\", casurl: \"https://cas.univ-tln.fr/cas/oidc/authorize\", clientid: \"appscho\", uriend: false },\n  { id: \"wsfactory\", name: \"Web School Factory\", casurl: \"https://gge-fra.onelogin.com/oidc/2/auth\", clientid: \"269eb430-4e7f-013d-80d4-06e3653b829437627\", scope: \"openid+profile+email+params+groups\", uriend: false }\n];\n\nexport const createAppSchoAPI = (instance: string): string =>\n  `https://api.appscho.com/${instance}`;\n\nexport const createMyAppSchoAPI = (instance: string): string =>\n  `https://my.appscho.com/api/${instance}`;\n\nexport const createFeedAPI = (instance: string): string =>\n  `https://feed.appscho.com/api/m/v1/${instance}`;\n","import type { CareerEvent, Response } from \"~/models\";\n\nimport { createAppSchoAPI } from \"~/core/constants\";\n\nexport const getCareerEvents = async (instance: string): Promise<Response<CareerEvent>> => {\n  const response = await fetch(`${createAppSchoAPI(instance)}/career/events`);\n  return response.json();\n};\n","export class AppSchoError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"AppSchoError\";\n  }\n}\n\nexport class CASNotSupportedError extends AppSchoError {\n  constructor(instance: string) {\n    super(`CAS authentication is not supported for instance \"${instance}\"`);\n    this.name = \"CASNotSupportedError\";\n  }\n}\n\nexport class InternalServerError extends AppSchoError {\n  constructor() {\n    super(\"Internal server error, please try again later\");\n    this.name = \"InternalServerError\";\n  }\n}\n\nexport class NoPlanningSubscriptionError extends AppSchoError {\n  constructor() {\n    super(\"Your account does not have a planning subscription, please check your intranet\");\n    this.name = \"NoPlanningSubscriptionError\";\n  }\n}\n\nexport class NotFoundError extends AppSchoError {\n  constructor() {\n    super(\"Not found, your instance probably doesn't have this feature\");\n    this.name = \"NotFoundError\";\n  }\n}\n\nexport class UnauthorizedError extends AppSchoError {\n  constructor() {\n    super(\"Unauthorized, please check your credentials or token\");\n    this.name = \"UnauthorizedError\";\n  }\n}\n","import type { Response } from \"~/models/response\";\n\nimport { InternalServerError, NotFoundError, UnauthorizedError } from \"./errors\";\n\nexport const handleResponse = <T>(response: Response<T>): T => {\n  switch (response.state) {\n    case \"ok\" : return response.response;\n\n    case \"unauthorized\":\n      throw new UnauthorizedError();\n\n    case \"internal_server_error\":\n      throw new InternalServerError();\n\n    default:\n      throw new NotFoundError();\n  }\n};\n","import type { Crous, Response } from \"~/models\";\n\nimport { createAppSchoAPI } from \"~/core/constants\";\nimport { handleResponse } from \"~/core/handler\";\n\nexport const getCrous = async (instance: string, token: string): Promise<Array<Crous>> => {\n  const response = await fetch(`${createAppSchoAPI(instance)}/crous`, {\n    headers: {\n      \"X-Appscho-Token\": token\n    }\n  });\n\n  const json: Response<Array<Crous>> = await response.json();\n  return handleResponse(json);\n};\n","import type { CrousRestaurant, Response } from \"~/models\";\n\nimport { createAppSchoAPI } from \"~/core/constants\";\nimport { handleResponse } from \"~/core/handler\";\n\nexport const getCrousRestaurants = async (instance: string, token: string, crous: string): Promise<Array<CrousRestaurant>> => {\n  const response = await fetch(`${createAppSchoAPI(instance)}/crous/${crous}/restaurants`, {\n    headers: {\n      \"X-Appscho-Token\": token\n    }\n  });\n\n  const json = await response.json() as Response<Array<CrousRestaurant>>;\n  return handleResponse(json);\n};\n","import type { EventsFeed, Response } from \"~/models\";\n\nimport { createAppSchoAPI } from \"~/core/constants\";\nimport { handleResponse } from \"~/core/handler\";\n\nexport const getEventsFeed = async (instance: string): Promise<Array<EventsFeed>> => {\n  const response = await fetch(`${createAppSchoAPI(instance)}/events`);\n  const json: Response<Array<EventsFeed>> = await response.json();\n  return handleResponse(json);\n};\n","import type { ExternalService } from \"~/models\";\n\nimport { createMyAppSchoAPI } from \"~/core/constants\";\n\nexport const getExternalServices = async (instance: string): Promise<Array<ExternalService>> => {\n  const response = await fetch(`${createMyAppSchoAPI(instance)}/webviews`);\n  return response.json();\n};\n","import type { FacebookFeed, Response } from \"~/models\";\n\nimport { createAppSchoAPI } from \"~/core/constants\";\nimport { handleResponse } from \"~/core/handler\";\n\nexport const getFacebookFeed = async (instance: string): Promise<Array<FacebookFeed>> => {\n  const response = await fetch(`${createAppSchoAPI(instance)}/facebook`);\n  const json: Response<Array<FacebookFeed>> = await response.json();\n  return handleResponse(json);\n};\n","import type { FeedChannel } from \"~/models\";\n\nimport { createFeedAPI } from \"~/core/constants\";\n\nexport const getFeedChannels = async (instance: string): Promise<Array<FeedChannel>> => {\n  const response = await fetch(`${createFeedAPI(instance)}/channels`);\n  return response.json();\n};\n","import type { FeedPost } from \"~/models\";\n\nimport { createFeedAPI } from \"~/core/constants\";\n\nexport const getFeedPosts = async (instance: string): Promise<Array<FeedPost>> => {\n  const response = await fetch(`${createFeedAPI(instance)}/posts`);\n  return response.json();\n};\n","import type { Category } from \"~/models\";\n\nexport const getKnowledgebase = async (instance: string): Promise<Array<Category>> => {\n  const response = await fetch(`https://my.appscho.com/api/v3/${instance}/knowledgebase`);\n  return response.json();\n};\n","import type { Location } from \"~/models\";\n\nimport { createMyAppSchoAPI } from \"~/core/constants\";\n\nexport const getLocations = async (instance: string): Promise<Array<Location>> => {\n  const response = await fetch(`${createMyAppSchoAPI(instance)}/locations`);\n  return response.json();\n};\n","import type { Response, User } from \"~/models\";\n\nimport { createAppSchoAPI } from \"~/core/constants\";\nimport { handleResponse } from \"~/core/handler\";\n\nexport const loginWithCredentials = async (instance: string, username: string, password: string): Promise<User> => {\n  try {\n    const response = await fetch(`${createAppSchoAPI(instance)}/login`, {\n      headers: {\n        \"X-Appscho-EncodedToken\": \"1\",\n        \"X-Appscho-Id\": username,\n        \"X-Appscho-Token\": btoa(password)\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const json: Response<User> = await response.json();\n    return handleResponse(json);\n  }\n  catch (error) {\n    if (error instanceof TypeError && error.message.includes(\"fetch\")) {\n      throw new Error(\"Network error: Unable to connect to AppScho API\");\n    }\n    throw error;\n  }\n};\n","import type { OAuthLogin, OAuthUserData, Response, User } from \"~/models\";\n\nimport { createAppSchoAPI, INSTANCES } from \"~/core/constants\";\nimport { CASNotSupportedError } from \"~/core/errors\";\nimport { handleResponse } from \"~/core/handler\";\n\nconst formatUserData = (userData: OAuthUserData, token: string, refreshToken?: string): User => {\n  return {\n    firstname: userData.firstname,\n    id_token: userData.id_token,\n    lastname: userData.lastname,\n    picture: userData.picture || \"\",\n    program: userData.program,\n    refreshToken: refreshToken,\n    token: token\n  };\n};\n\nconst generateRandomHexString = (length: number = 8): string => {\n  const chars = \"0123456789ABCDEF\";\n  let result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n};\n\nconst validateInstance = (instance: string): void => {\n  const instanceData = INSTANCES.find((inst) => inst.id === instance);\n\n  if (!instanceData) {\n    throw new Error(`Unknown instance: ${instance}`);\n  }\n\n  if (!instanceData.casurl || !instanceData.clientid) {\n    throw new CASNotSupportedError(instance);\n  }\n};\n\nexport const getCASURL = (instance: string): string => {\n  validateInstance(instance);\n  const instanceData = INSTANCES.find((inst) => inst.id === instance)!;\n\n  const state = generateRandomHexString(8);\n\n  const redirectUri = instanceData.uriend === false\n    ? `https://${instance}.callback.oauth.appscho.com`\n    : `https://${instance}.callback.oauth.appscho.com/`;\n\n  const params = new URLSearchParams({\n    client_id: instanceData.clientid!,\n    redirect_uri: redirectUri,\n    response_type: \"code\",\n    state: state\n  });\n\n  let queryString = params.toString();\n\n  if (instanceData.scope) {\n    queryString += `&scope=${instanceData.scope}`;\n  }\n\n  return `${instanceData.casurl}?${queryString}`;\n};\n\n\nexport const loginWithOAuth = async (instance: string, oauthToken: string): Promise<User> => {\n  try {\n    validateInstance(instance);\n\n    const tokenResponse = await fetch(`${createAppSchoAPI(instance)}/oauth/token`, {\n      body: `code=${oauthToken}&grant_type=authorization_code`,\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      method: \"POST\"\n    });\n\n    if (!tokenResponse.ok) {\n      throw new Error(`OAuth token exchange failed: ${tokenResponse.status} ${tokenResponse.statusText}`);\n    }\n\n    const tokenData: OAuthLogin = await tokenResponse.json();\n\n    if (!tokenData.access_token) {\n      throw new Error(\"Invalid OAuth response: missing access_token\");\n    }\n\n    const userResponse = await fetch(`${createAppSchoAPI(instance)}/whoami`, {\n      headers: {\n        \"X-Appscho-Token\": tokenData.access_token\n      }\n    });\n\n    if (!userResponse.ok) {\n      throw new Error(`User data fetch failed: ${userResponse.status} ${userResponse.statusText}`);\n    }\n\n    const userJson: Response<OAuthUserData> = await userResponse.json();\n    const userData = handleResponse(userJson);\n\n    return formatUserData(userData, tokenData.access_token, tokenData.refresh_token);\n  }\n  catch (error) {\n    if (error instanceof TypeError && error.message.includes(\"fetch\")) {\n      throw new Error(\"Network error: Unable to connect to AppScho API\");\n    }\n    throw error;\n  }\n};\n\nexport const refreshOAuthToken = async (instance: string, refreshToken: string): Promise<OAuthLogin> => {\n  try {\n    if (!refreshToken) {\n      throw new Error(\"Refresh token is required\");\n    }\n\n    const response = await fetch(`${createAppSchoAPI(instance)}/oauth/refresh`, {\n      body: `refresh_token=${refreshToken}`,\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      method: \"POST\"\n    });\n\n    if (!response.ok) {\n      throw new Error(`Token refresh failed: ${response.status} ${response.statusText}`);\n    }\n\n    const tokenData: OAuthLogin = await response.json();\n\n    if (!tokenData.access_token) {\n      throw new Error(\"Invalid refresh response: missing access_token\");\n    }\n\n    return tokenData;\n  }\n  catch (error) {\n    if (error instanceof TypeError && error.message.includes(\"fetch\")) {\n      throw new Error(\"Network error: Unable to connect to AppScho API\");\n    }\n    throw error;\n  }\n};\n","import type { Metadata, Platform, Response } from \"~/models\";\n\nimport { handleResponse } from \"~/core/handler\";\n\nexport const getMetadata = async (instance: string, platform: Platform): Promise<Metadata> => {\n  const response = await fetch(`https://metadata.appscho.com/versions/${instance}/${platform}/production`);\n  const json: Response<Metadata> = await response.json();\n  return handleResponse(json);\n};\n","import type { NewsFeed, Response } from \"~/models\";\n\nimport { createAppSchoAPI } from \"~/core/constants\";\nimport { handleResponse } from \"~/core/handler\";\n\nexport const getNewsFeed = async (instance: string): Promise<Array<NewsFeed>> => {\n  const response = await fetch(`${createAppSchoAPI(instance)}/news`);\n  const json: Response<Array<NewsFeed>> = await response.json();\n  return handleResponse(json);\n};\n","import type { Lesson, Response } from \"~/models\";\n\nimport { createAppSchoAPI } from \"~/core/constants\";\nimport { NoPlanningSubscriptionError } from \"~/core/errors\";\nimport { handleResponse } from \"~/core/handler\";\n\nexport const getPlanning = async (instance: string, token: string): Promise<Array<Lesson>> => {\n  try {\n    const response = await fetch(`${createAppSchoAPI(instance)}/planning`, {\n      headers: {\n        \"X-Appscho-Token\": token\n      }\n    });\n\n    if (response.status === 500) {\n      throw new NoPlanningSubscriptionError();\n    }\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const json: Response<Array<Lesson>> = await response.json();\n    return handleResponse(json);\n  }\n  catch (error) {\n    if (error instanceof NoPlanningSubscriptionError) {\n      throw error;\n    }\n    if (error instanceof TypeError && error.message.includes(\"fetch\")) {\n      throw new Error(\"Network error: Unable to connect to AppScho API\");\n    }\n    throw error;\n  }\n};\n","import type { Profile } from \"~/models\";\n\nimport { createMyAppSchoAPI } from \"~/core/constants\";\n\nexport const getProfiles = async (instance: string): Promise<Array<Profile>> => {\n  const response = await fetch(`${createMyAppSchoAPI(instance)}/profiles`);\n  return response.json();\n};\n","import type { QuickAccess } from \"~/models\";\n\nimport { createMyAppSchoAPI } from \"~/core/constants\";\n\nexport const getQuickAccesses = async (instance: string): Promise<Array<QuickAccess>> => {\n  const response = await fetch(`${createMyAppSchoAPI(instance)}/quickaccess`);\n  return response.json();\n};\n","import type { Response, TwitterFeed } from \"~/models\";\n\nimport { createAppSchoAPI } from \"~/core/constants\";\nimport { handleResponse } from \"~/core/handler\";\n\nexport const getTwitterFeed = async (instance: string): Promise<Array<TwitterFeed>> => {\n  const response = await fetch(`${createAppSchoAPI(instance)}/twitter`);\n  const json: Response<Array<TwitterFeed>> = await response.json();\n  return handleResponse(json);\n};\n","import type { Response, YouTubeFeed } from \"~/models\";\n\nimport { createAppSchoAPI } from \"~/core/constants\";\nimport { handleResponse } from \"~/core/handler\";\n\nexport const getYouTubeFeed = async (instance: string): Promise<Array<YouTubeFeed>> => {\n  const response = await fetch(`${createAppSchoAPI(instance)}/youtube`);\n  const json: Response<Array<YouTubeFeed>> = await response.json();\n  return handleResponse(json);\n};\n"]}